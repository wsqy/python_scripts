python与电梯


我从单个电梯来理解 电梯类似一个信道，上电梯的人类似于数据流，数据流通过信道到传输到不同位置，电梯分上下行，同一时间如果有上行的人流，会阻塞所有下行的人流，这个位置
又和socket的tcp连接有点相似，也和锁机制有点相似，而如果是锁的话，那么这个电梯又可以理解为一个进程，如果将多个电梯同时的运作总体看的话 这个单个电梯又可以理解为线程，
多个线程运行 接收单向数据传输请求（上锁），并允许单向数据传输是抢占锁，数据流传输完毕释放锁，之后等待请求，但是这个和多线程又有点不同，因为电梯之间几乎是完全独立的
而线程之间 除了公用进程空间，cpu处理的时候 其实也是轮询处理的


python socket
分tcp和udp 遵循协议
tcp时socket的server端需要bind 而client不需要bind但是主动去connect  ，通信时阻塞状态。
当然可以配置不阻塞的setblocking false
如果阻塞态  server与clinet是一对一的  非阻塞是一对多
udp的话 server和client对等 可以弄成多对多结构，但由于udp特性 不保证其数据完整性
