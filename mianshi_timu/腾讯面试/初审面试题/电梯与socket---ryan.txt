电梯与python
分4种情况吧
手扶梯              队列，一边进另一边出
单个升降梯          每个人是一个线程，电梯口算是资源或者是锁
级联的多个升降梯    每个电梯当做一个线程。
                        每个人当做资源：（独占锁）（threading.Lock）
                            外面有人进来相当于对这个人加锁了，
                            里面的人出去了就相当于释放了这个人的锁
                        每层当做资源：（信号量）（threading.Semaphore）初始为0
                            外面有人按了(重复按不算)就相当于这个信号量计数加1，
                            某一电梯来了获取这个信号量，把人拉走，信号量减1
                            或者来个人增加一个信号量，上电梯一个人少一个信号量
                        电梯获取每个信号量都是非阻塞的方式。
不级联的多个升降梯  每个电梯当做一个线程，每层等待的人相当于一个队列，
                    每个线程到每层的队列都可以取其中等待的人，电梯的容量相当于缓冲区的大小


python中的socket

socket相当于两个点之间的信道，相当于IP协议，最常见的是TCP和UDP：
TCP面向连接，三次握手协议，建立连接，四次握手断开连接，稳定安全，可以用ssl封装加密。
    有序号校验，乱序，丢包都有可能造成传输失败。
    常见用途：http(s),ssh等
UDP非面向连接，知道对端地址就可以发，若需要稳定的传输需自定义协议。
    开销小，协议头小，效率高，不稳定
    常见用途：IM，视频，音频传输

编程：
TCP：
    server：
        导入socket模块
        新建socket对象
        bind绑定地址，端口
        accept等待客户端连接
        recv，send收发消息
        close关闭连接
    client：
        导入socket模块
        新建socket对象
        connect连接服务端
        recv，send收发消息
        close关闭连接
UDP：
    server：
        导入socket模块
        新建socket对象
        bind绑定地址，端口
        recvfrom，sendto收发消息
        close关闭连接
    client：
        导入socket模块
        新建socket对象
        bind绑定地址，端口 （可选）
        recvfrom，sendto收发消息
        close关闭连接