第一题：电梯的运行有哪些python的知识在里面？
答:电梯的运行很容易让人联想到python当中的多线程和多进程编程。

如果我们把一部电梯看成一个进程的话，他首先会起一个主线程来监控电梯的运行和使用情况，电梯的每一次使用就是启动一个线程。
例子：有三个人同时想使用一部电梯  首先A:在一楼要上到10层，B：在三层要上到8层， C:在5层要下去到1层
如果不启动多线程的话，应该是A先到10层(运行了9层)，然后电梯再下到3层(运行了7层)，在接到B之前电梯已经运行了16层,B从3层上到8层（运行了5层），然后电梯从8层下到5层（运行了3层），在接到C之前电梯已经运行了（接到B之前运行的16层+接到C之前运行的5+3层，总共是24层）；C从5层下到1层，这时候电梯又运行了4层，所以完成这轮任务在不适用多线程的情况下电梯一共运行24+4,28层
如果使用多线程的话 A从一楼运行到3楼的时候电梯开门让B进来，电梯继续运行，再运行到8层的时候B下去，电梯继续运行到10楼A下电梯，这时候电梯一共运行了9层  然后电梯下行到第5层接C到1层,接到C之前运行了5层，接到C之后运行了4层，所有总共才花费了18层，这大大的减少了运行的时候，当然实际的时候并不会提高这么多，线程执行前和后处理一些资源和释放一些资源的时候，也需要一些花费，但是总体来说使用多线程会大大提高CPU的利用率

当然使用多线程也会引起一些问题，比如，A使用电梯往上运行到第5层的时候C也要使用电梯，如果电梯这个时候被C使用了那么电梯往下运行对A来说就是不可接受的，为了避免这个问题我在刚刚的例子中也使用了这个概念 就是电梯上行的时候不允许下行使用，也就是给电梯加一个上行锁，只允许上行使用，不允许下行的线程使用电梯资源 当上行的任务做完后 释放上行锁，别的任务才可以使用电梯资源


第二题:socket
socet也称网络套接字,是用来提供网络通信服务的.通信必然有两方，提供网络服务的 称为server端服务端，使用网络服务的称为客户端 client。
大概的通信流程是这样的
server端先启动,
第一步：根据地址类型(ipv4还是ipv6) socket类型 协议类型(TCP UDP)来创建socket
第二步：服务器为socket绑定IP地址和端口号(bind)
第三步：服务器socket监听端口号请求，随时准备接受客户端发过来的连接，这时候其实socket并没有打开（listen）
第四步：客户端创建一个socket
第五步：客户端打开socket,根据服务器ip地址和端口号试图连接服务器的socket
第六步：服务器socket接受到客户端的socket请求被动打开，开始接受客户端请求，直到客户端返回连接信息，这时候socket进入阻塞状态，所谓阻塞状态即方法一直到客户端返回连接信息之后才返回，这时候才能接受下一个客户端的连接请求accept()
第七步：客户端连接成功，向服务器发送连接状态信息
第八步：服务器accept方法返回，连接成功
第九步：客户端向socket send信息
第十步：服务端接受信息 recvive
第十一步：客户端关闭
第十二步：服务端关闭
