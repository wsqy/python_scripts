元字符
. 表示匹配任意一个字符(除换行)
^  放在要匹配的单词的前面表示只匹配行首的这个单词
$  放在要匹配的单词后面表示只匹配行尾是这个单词的   
\
  1).加不同字符一表示特殊的意义 
	\d 匹配任一十进制数 <==> [0-9]
	\s 匹配任一空白字符<==> [\t\n\r\f\v]
	\w 匹配任一字母数字下划线 <==> [0-9a-zA-Z_]
	注：如果以上改为大写 则相当于在前面加^(取反)
  2).也可以用来取消所有的元字符 比如：\[ \\
* 将*前面的字符重复0到n次  根据贪婪模式他会尽可能多的匹配(在整数范围20亿内)
+ 将*前面的字符重复1到n次  不允许不出现
? 将*前面的字符重复0次或者1次 常用来标志某事物是可选的 放在 *和+和[]后面表示开启非贪婪模式
[]  匹配括号的字符集中的一个，可以用范围比如 0-9 ,a-z,  ^放在开头表示取反
{m,n}  限定至多重复n次 最少重复m次，m和n都可以省略(逗号要加)  {m}表示限定匹配m次
| 符号前后只出现一个则匹配成功 常与分组结合使用，注意使用分组时只会出现分组中的字符

Compile--编译
编译完效率会提升，所以常用的正则需要编译。
Object_name=re.compile(res[,re_module])    object_name.findall(string)

执行匹配：
re.match()  在字符串刚开始的位置才匹配 
re.search()  全文匹配,找到第一个返回 
re.findall()  找到RE匹配的所有子串，并返回为列表（包括匹配的字符串）
re.finditer() 找到RE匹配的所有子串，并返回为迭代器(其中包涵MatchObiect)
如果没有匹配的话 match()和search()将返回None 匹配成功将返回matchobject实例

MatchObiect方法：
group() 返回匹配的字符串和子匹配项  groups()返回所有的子匹配项
Span()返回一个元祖包含匹配(开始，结束)的位置
start()返回匹配开头的位置    End() 返回匹配结束的位置

Re.sub(正则，替换后的字符串，原始字符串),还有个subn()的函数，可以在sub函数的基础上返回替换的次数
------可以将原始字符串中符合正则的子串替换为定义好的子串，返回值是修改后的字符串


Re.spilt() 使字符串分片符能正则匹配
特殊的模式  比如：
re.I re.DOTALL  匹配时将不区分大小写
re.S 使.可以匹配换行
re.X 正则多行时使用    
re.M字符串多行时使用    